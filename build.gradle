plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
    id "org.jlleitschuh.gradle.ktlint" version '11.6.0'
    id "org.jlleitschuh.gradle.ktlint-idea" version '11.6.0'

    id "org.openapi.generator" version "7.0.1"
}

ext {
    mybatisSpringBootStarterVersion = "3.0.2"
    springModulithBomVersion = "1.0.1"
    archunitVersion = '1.1.0'
}


group = 'com.example'
version = '0.0.1'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

kotlin {
    jvmToolchain(17)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //spring tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'


    //container
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //data
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootStarterVersion}"

    //monitor
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //test
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${mybatisSpringBootStarterVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}"

    //kotlin-module
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    //data-connector
    testRuntimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithBomVersion}"
    }
}


test {
    useJUnitPlatform()
}

jar {
    archiveClassifier = ''
    enabled = false
}

openApiValidate {
    inputSpec.set("$rootDir/specs/petstore.yaml")
}

//https://openapi-generator.tech/docs/generators/kotlin-spring/
openApiGenerate {
    outputDir.set("$rootDir/generated")
    generatorName.set("kotlin-spring")
    inputSpec.set("$rootDir/specs/petstore.yaml")
    outputDir.set("$rootDir/build/generated")
    apiPackage.set("com.example.kotlinonspringboot.presentation.api")
    modelPackage.set("com.example.kotlinonspringboot.presentation.model")
    configOptions.set([
            useSpringBoot3       : "true",
            delegatePattern      : "false",
            documentationProvider: "springdoc",
            enumPropertyNaming   : "camelCase",
            exceptionHandler     : "false",
            interfaceOnly        : "true",
            modelMutable         : "false",
            serverPort           : "8080",
            "useTags"            : "true"
    ])
}

compileKotlin {
    dependsOn("openApiGenerate")
}

kotlin.sourceSets.main {
    kotlin.srcDir("${openApiGenerate.outputDir.get()}/src/main/kotlin")
}

ktlint {
    debug = true
    verbose = true

    filter {
        exclude { entry ->
            entry.file.toString().contains("generated")
        }
        include("**/kotlin/**")
    }
}
